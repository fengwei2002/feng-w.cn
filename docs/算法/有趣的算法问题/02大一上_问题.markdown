---
layout: post
title: 大一上问题（总）
categories: [待解决]
date: 2020-02-05
---

***

## 吹蜡烛

***
*待解决*

题目描述

为迎接元旦晚会, 院队也开展了一项活动, 

现有35人围成一个圈, 从1-35 按顺序编号

然后从1号开始喊数(1-3循环喊数), 

凡是喊到3的人退出圈子, 直至只剩下一个人, 

最后留下的这位"幸运儿"要请大家吃饭, 请问最后留下的是几号呢.

输入

     无

输出

     请输入一个数字表示最后留下的是第几号  

## 生日蜡烛

***
某君从某年开始每年都举办一次生日party，并且每次都要吹熄与年龄相同根数的蜡烛。

现在算起来，他一共吹熄了236根蜡烛。

请问，他从多少岁开始过生日party的？

请填写他开始过生日party的年龄数。  
注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。

//写两次循环累加
if  累加外循环减累加内循环==256
printf

## 爬楼梯

题目描述
一个人, 这天他要去软件楼上课, 走到楼梯口他突然想到, 这楼梯共M级，刚开始时晓鹏在第一级，若每次只能跨上一级或二级，要走上第M级，共有多少种走法？

输入  
输入一个数字M.

输出  
输出一个数字表示有多少种走法.

样例输入  
2

样例输出  
1

## 数组算高阶乘

。。。

## 字符串取头尾

题目: 输入一个字符串, 同时输入帧头和帧尾(可以是多个字符), 将该字符串中合法的帧识别出来.
举例: 输入帧 头 和 帧 尾 分 别 是 head 和 tail ，则字符串” asdheadchinaisoktail7777”  
中headchinaisoktail 是合法帧，将headchinaisoktail输出  

``` cpp
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
int main()
{
    //输入三个字符串，3输出1-2中间的（包括1，2）
    printf("请输入三个字符串；回车代表输入完成一个\n");
    char head[100];
    char tail[100];
    char input[100];
    scanf("%s", head);
    scanf("%s", tail);
    scanf("%s", input);
    /*strcpy(head, "haha");
	strcpy(tail, "wuwu");
	strcpy(input, "asdshahamwuwu");*/
    int H = 0;
    int num = 0; //进行计数，看看相等的数量一样不；
    for (int j = 0; j < strlen(input); j++)
    {
        if (input[j] == head[0])
        {          //开始
            H = j; //计下来head开始的数字
            for (int i = 0; i < strlen(head); i++, j++)
            {
                if (input[j] == head[i])
                {
                    num = num + 1;
                }
            }
            break;
        }
    }
    printf("head相同的个数 %d，head开始的数字%d\n", num, H);
    int T = 0;
    int num2 = 0;
    for (int m = H; m < strlen(input); m++)
    {
        if (input[m] == tail[0])
        {          //开始
            T = m; //计下来，tail开始时候的数字;下面输出head到tail时候用
            for (int i = 0; i < strlen(tail); i++, m++)
            {
                if (input[m] == tail[i])
                {
                    num2 = num2 + 1;
                }
            }
            break;
        }
    }
    printf("tail相同的个数 %d，tail开始的数字%d\n", num2, T);
    if (num == strlen(head) && num2 == strlen(tail))
    {
        //如果head   和  tail完全相等，开始利用前面记录下来的 H，T 进行输出字符串
        for (int i = H; i < T + strlen(tail); i++)
        {
            printf("%c", input[i]);
        }
    }
    else
    {
        printf("输入数据有误");
    }
    getchar();
    return 0;
}
```

## 字符串删除

``` c
	/*编写一个程序，先输入一个字符串 str1（长度不超过 20），
		再输入一个单独的字符 ch， 然后程序会把字符串 str 当中出现的
		所有的 ch 字符都删掉，从而得到一个新的字符串 str2， 然后把这个字符串打印出来*/
	char str1[20];
	char str2[20];
	int n = 0;
	for (int m = 0; m < 20; m++)
	{
		str2[m] = 0;
		str1[m] = 0;
	}
	char ch;
	printf("请输入初始字符串");
	//abcde==>abcd
	scanf("%s", &str1);
	printf("要删除的字符");
	scanf("%s", &ch);
	printf("%s;%c\n", str1, ch);
	for (int i = 0; i < 20; i++)
	{
		if (str1[i] != ch)
		{
			str2[n] = str1[i];
			n = n + 1;
		}
	}
	printf("处理后的字符串为");
	for (int j = 0; j < 20; j++)
	{
		if (str2[j] != 0)
		{

			printf("%c", str2[j]);
		}
	}
	return 0;
}
```

## 筛法求素数

用2-sqrt(x)来试商；  
x=a*b  
若 a>=sqrt(x), 则 b<=sqrt（x）; 
所以如果b不存在，那么a也不存在  

``` c
#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<math.h>
#include<string.h>
#define N 100
int main() {
	//初始化数组元素为1-100
	//筛选掉a中所有a[i]--sqrt(N)的倍数，置为0;
	//输出数组中余下的！=0的数
	int began[N + 1];
	for (int i = 0; i <= N; i++) {
		began[i] = i;
	}
	//后续不使用A1   A2
	int square = sqrt(N);
	for (int j = 2; j <= square; j++) {
		//启用数组第二项开始进行筛选
		for (int k = j + 1; k <= N; k++) {
			//不能包括用来筛选的位置本身；且k=N时也要进入循环

			//Integer division by zero。
			//整数除以0
			//因为&&先运算前面的条件；后运算后面的条件；所以；先判断这两个不为零再开始做除法
			if (began[j] != 0 && began[k] % began[j] == 0 && began[k] != 0) {
				began[k] = 0;
			}
		}
	}
	int num = 0;
	//从2开始输出,num判断输出行数时要把num放到if里面执行
	for (int p = 2; p <= N; p++) {
		if (began[p] != 0) {
			num += 1;
			printf("%d\t", began[p]);
			if (num % 5 == 0) {
				printf("\n");
			}
		}
	}
	return 0;
}
```

## 输出数字金字塔

``` c
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
int main()
{
    int i, j, k, n;
    scanf("%d", &n);
    for (i = 1; i <= n; i++)
    {
        for (k = n - i; k > 0; k--)
        {
            printf("#");

            //注意这个倒序输出，用满变量减去当前循环值
        }
        for (j = 0; j < i; j++)
        {
            printf("%d ", i);
        }

        printf("\n");
    }

    return 0;
}
```

## 最大公约数，最小公倍数

